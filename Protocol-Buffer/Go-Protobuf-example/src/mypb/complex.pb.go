// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: complex.proto

package mypb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Day int32

const (
	Day_SUNDAY    Day = 0
	Day_MONDAY    Day = 1
	Day_TUESDAY   Day = 2
	Day_WEDNESDAY Day = 3
	Day_THURSDAY  Day = 4
	Day_FRIDAY    Day = 5
	Day_SATURDAY  Day = 6
)

// Enum value maps for Day.
var (
	Day_name = map[int32]string{
		0: "SUNDAY",
		1: "MONDAY",
		2: "TUESDAY",
		3: "WEDNESDAY",
		4: "THURSDAY",
		5: "FRIDAY",
		6: "SATURDAY",
	}
	Day_value = map[string]int32{
		"SUNDAY":    0,
		"MONDAY":    1,
		"TUESDAY":   2,
		"WEDNESDAY": 3,
		"THURSDAY":  4,
		"FRIDAY":    5,
		"SATURDAY":  6,
	}
)

func (x Day) Enum() *Day {
	p := new(Day)
	*p = x
	return p
}

func (x Day) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Day) Descriptor() protoreflect.EnumDescriptor {
	return file_complex_proto_enumTypes[0].Descriptor()
}

func (Day) Type() protoreflect.EnumType {
	return &file_complex_proto_enumTypes[0]
}

func (x Day) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Day.Descriptor instead.
func (Day) EnumDescriptor() ([]byte, []int) {
	return file_complex_proto_rawDescGZIP(), []int{0}
}

type Month int32

const (
	Month_JANUARY   Month = 0
	Month_FEBRUARY  Month = 1
	Month_MARCH     Month = 2
	Month_APRIL     Month = 3
	Month_MAY       Month = 4
	Month_JUNE      Month = 5
	Month_JULY      Month = 6
	Month_AUGUST    Month = 7
	Month_SEPTEMBER Month = 8
	Month_OCTOBER   Month = 9
	Month_NOVEMBER  Month = 10
	Month_DECEMBER  Month = 11
)

// Enum value maps for Month.
var (
	Month_name = map[int32]string{
		0:  "JANUARY",
		1:  "FEBRUARY",
		2:  "MARCH",
		3:  "APRIL",
		4:  "MAY",
		5:  "JUNE",
		6:  "JULY",
		7:  "AUGUST",
		8:  "SEPTEMBER",
		9:  "OCTOBER",
		10: "NOVEMBER",
		11: "DECEMBER",
	}
	Month_value = map[string]int32{
		"JANUARY":   0,
		"FEBRUARY":  1,
		"MARCH":     2,
		"APRIL":     3,
		"MAY":       4,
		"JUNE":      5,
		"JULY":      6,
		"AUGUST":    7,
		"SEPTEMBER": 8,
		"OCTOBER":   9,
		"NOVEMBER":  10,
		"DECEMBER":  11,
	}
)

func (x Month) Enum() *Month {
	p := new(Month)
	*p = x
	return p
}

func (x Month) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Month) Descriptor() protoreflect.EnumDescriptor {
	return file_complex_proto_enumTypes[1].Descriptor()
}

func (Month) Type() protoreflect.EnumType {
	return &file_complex_proto_enumTypes[1]
}

func (x Month) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Month.Descriptor instead.
func (Month) EnumDescriptor() ([]byte, []int) {
	return file_complex_proto_rawDescGZIP(), []int{1}
}

type AppointmentDate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Day   Day   `protobuf:"varint,1,opt,name=day,proto3,enum=complex.Day" json:"day,omitempty"`
	Date  int32 `protobuf:"varint,2,opt,name=date,proto3" json:"date,omitempty"`
	Month Month `protobuf:"varint,3,opt,name=month,proto3,enum=complex.Month" json:"month,omitempty"`
	Year  int32 `protobuf:"varint,4,opt,name=year,proto3" json:"year,omitempty"`
}

func (x *AppointmentDate) Reset() {
	*x = AppointmentDate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complex_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentDate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentDate) ProtoMessage() {}

func (x *AppointmentDate) ProtoReflect() protoreflect.Message {
	mi := &file_complex_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentDate.ProtoReflect.Descriptor instead.
func (*AppointmentDate) Descriptor() ([]byte, []int) {
	return file_complex_proto_rawDescGZIP(), []int{0}
}

func (x *AppointmentDate) GetDay() Day {
	if x != nil {
		return x.Day
	}
	return Day_SUNDAY
}

func (x *AppointmentDate) GetDate() int32 {
	if x != nil {
		return x.Date
	}
	return 0
}

func (x *AppointmentDate) GetMonth() Month {
	if x != nil {
		return x.Month
	}
	return Month_JANUARY
}

func (x *AppointmentDate) GetYear() int32 {
	if x != nil {
		return x.Year
	}
	return 0
}

type AppointmentBook struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AppointmentDate *AppointmentDate  `protobuf:"bytes,2,opt,name=appointmentDate,proto3" json:"appointmentDate,omitempty"`
	Patients        []*Person         `protobuf:"bytes,3,rep,name=patients,proto3" json:"patients,omitempty"`
	ContactDetails  map[string]string `protobuf:"bytes,4,rep,name=contactDetails,proto3" json:"contactDetails,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Types that are assignable to AppointmentStatus:
	//	*AppointmentBook_IsCancelled
	//	*AppointmentBook_Reason
	AppointmentStatus isAppointmentBook_AppointmentStatus `protobuf_oneof:"appointmentStatus"`
}

func (x *AppointmentBook) Reset() {
	*x = AppointmentBook{}
	if protoimpl.UnsafeEnabled {
		mi := &file_complex_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AppointmentBook) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AppointmentBook) ProtoMessage() {}

func (x *AppointmentBook) ProtoReflect() protoreflect.Message {
	mi := &file_complex_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AppointmentBook.ProtoReflect.Descriptor instead.
func (*AppointmentBook) Descriptor() ([]byte, []int) {
	return file_complex_proto_rawDescGZIP(), []int{1}
}

func (x *AppointmentBook) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *AppointmentBook) GetAppointmentDate() *AppointmentDate {
	if x != nil {
		return x.AppointmentDate
	}
	return nil
}

func (x *AppointmentBook) GetPatients() []*Person {
	if x != nil {
		return x.Patients
	}
	return nil
}

func (x *AppointmentBook) GetContactDetails() map[string]string {
	if x != nil {
		return x.ContactDetails
	}
	return nil
}

func (m *AppointmentBook) GetAppointmentStatus() isAppointmentBook_AppointmentStatus {
	if m != nil {
		return m.AppointmentStatus
	}
	return nil
}

func (x *AppointmentBook) GetIsCancelled() bool {
	if x, ok := x.GetAppointmentStatus().(*AppointmentBook_IsCancelled); ok {
		return x.IsCancelled
	}
	return false
}

func (x *AppointmentBook) GetReason() string {
	if x, ok := x.GetAppointmentStatus().(*AppointmentBook_Reason); ok {
		return x.Reason
	}
	return ""
}

type isAppointmentBook_AppointmentStatus interface {
	isAppointmentBook_AppointmentStatus()
}

type AppointmentBook_IsCancelled struct {
	IsCancelled bool `protobuf:"varint,5,opt,name=isCancelled,proto3,oneof"`
}

type AppointmentBook_Reason struct {
	Reason string `protobuf:"bytes,9,opt,name=reason,proto3,oneof"`
}

func (*AppointmentBook_IsCancelled) isAppointmentBook_AppointmentStatus() {}

func (*AppointmentBook_Reason) isAppointmentBook_AppointmentStatus() {}

var File_complex_proto protoreflect.FileDescriptor

var file_complex_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x07, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x1a, 0x0b, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7f, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x03, 0x64, 0x61, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x2e,
	0x44, 0x61, 0x79, 0x52, 0x03, 0x64, 0x61, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x64, 0x61, 0x74, 0x65, 0x12, 0x24, 0x0a, 0x05,
	0x6d, 0x6f, 0x6e, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x78, 0x2e, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x52, 0x05, 0x6d, 0x6f, 0x6e,
	0x74, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x79, 0x65, 0x61, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x79, 0x65, 0x61, 0x72, 0x22, 0x80, 0x03, 0x0a, 0x0f, 0x41, 0x70, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42,
	0x0a, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x78, 0x2e, 0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74,
	0x65, 0x52, 0x0f, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x12, 0x29, 0x0a, 0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x68, 0x65, 0x6c, 0x6c, 0x6f, 0x2e, 0x50, 0x65, 0x72,
	0x73, 0x6f, 0x6e, 0x52, 0x08, 0x70, 0x61, 0x74, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x54, 0x0a,
	0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x78, 0x2e,
	0x41, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x42, 0x6f, 0x6f, 0x6b, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x0e, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x12, 0x22, 0x0a, 0x0b, 0x69, 0x73, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x6c,
	0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52, 0x0b, 0x69, 0x73, 0x43, 0x61,
	0x6e, 0x63, 0x65, 0x6c, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x1a, 0x41, 0x0a, 0x13, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x42, 0x13, 0x0a, 0x11, 0x61, 0x70, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2a, 0x61, 0x0a, 0x03, 0x44, 0x61, 0x79,
	0x12, 0x0a, 0x0a, 0x06, 0x53, 0x55, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06,
	0x4d, 0x4f, 0x4e, 0x44, 0x41, 0x59, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x55, 0x45, 0x53,
	0x44, 0x41, 0x59, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x57, 0x45, 0x44, 0x4e, 0x45, 0x53, 0x44,
	0x41, 0x59, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x48, 0x55, 0x52, 0x53, 0x44, 0x41, 0x59,
	0x10, 0x04, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x52, 0x49, 0x44, 0x41, 0x59, 0x10, 0x05, 0x12, 0x0c,
	0x0a, 0x08, 0x53, 0x41, 0x54, 0x55, 0x52, 0x44, 0x41, 0x59, 0x10, 0x06, 0x2a, 0x99, 0x01, 0x0a,
	0x05, 0x4d, 0x6f, 0x6e, 0x74, 0x68, 0x12, 0x0b, 0x0a, 0x07, 0x4a, 0x41, 0x4e, 0x55, 0x41, 0x52,
	0x59, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x45, 0x42, 0x52, 0x55, 0x41, 0x52, 0x59, 0x10,
	0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x41, 0x52, 0x43, 0x48, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05,
	0x41, 0x50, 0x52, 0x49, 0x4c, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x4d, 0x41, 0x59, 0x10, 0x04,
	0x12, 0x08, 0x0a, 0x04, 0x4a, 0x55, 0x4e, 0x45, 0x10, 0x05, 0x12, 0x08, 0x0a, 0x04, 0x4a, 0x55,
	0x4c, 0x59, 0x10, 0x06, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x55, 0x47, 0x55, 0x53, 0x54, 0x10, 0x07,
	0x12, 0x0d, 0x0a, 0x09, 0x53, 0x45, 0x50, 0x54, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x08, 0x12,
	0x0b, 0x0a, 0x07, 0x4f, 0x43, 0x54, 0x4f, 0x42, 0x45, 0x52, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08,
	0x4e, 0x4f, 0x56, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45,
	0x43, 0x45, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0b, 0x42, 0x08, 0x5a, 0x06, 0x2e, 0x2f, 0x6d, 0x79,
	0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_complex_proto_rawDescOnce sync.Once
	file_complex_proto_rawDescData = file_complex_proto_rawDesc
)

func file_complex_proto_rawDescGZIP() []byte {
	file_complex_proto_rawDescOnce.Do(func() {
		file_complex_proto_rawDescData = protoimpl.X.CompressGZIP(file_complex_proto_rawDescData)
	})
	return file_complex_proto_rawDescData
}

var file_complex_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_complex_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_complex_proto_goTypes = []interface{}{
	(Day)(0),                // 0: complex.Day
	(Month)(0),              // 1: complex.Month
	(*AppointmentDate)(nil), // 2: complex.AppointmentDate
	(*AppointmentBook)(nil), // 3: complex.AppointmentBook
	nil,                     // 4: complex.AppointmentBook.ContactDetailsEntry
	(*Person)(nil),          // 5: hello.Person
}
var file_complex_proto_depIdxs = []int32{
	0, // 0: complex.AppointmentDate.day:type_name -> complex.Day
	1, // 1: complex.AppointmentDate.month:type_name -> complex.Month
	2, // 2: complex.AppointmentBook.appointmentDate:type_name -> complex.AppointmentDate
	5, // 3: complex.AppointmentBook.patients:type_name -> hello.Person
	4, // 4: complex.AppointmentBook.contactDetails:type_name -> complex.AppointmentBook.ContactDetailsEntry
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_complex_proto_init() }
func file_complex_proto_init() {
	if File_complex_proto != nil {
		return
	}
	file_hello_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_complex_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentDate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_complex_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AppointmentBook); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_complex_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*AppointmentBook_IsCancelled)(nil),
		(*AppointmentBook_Reason)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_complex_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_complex_proto_goTypes,
		DependencyIndexes: file_complex_proto_depIdxs,
		EnumInfos:         file_complex_proto_enumTypes,
		MessageInfos:      file_complex_proto_msgTypes,
	}.Build()
	File_complex_proto = out.File
	file_complex_proto_rawDesc = nil
	file_complex_proto_goTypes = nil
	file_complex_proto_depIdxs = nil
}
